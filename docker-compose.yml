version: '3'

services:
  exhauster-monitoring-ui:
    build:
      context: frontend
      dockerfile: DockerfileFrontend
    restart: always
    container_name: exhauster-monitoring-ui
    ports:
      - "33000:80"
    tty: true

  exhauster-monitoring-api:
    image: docker.io/library/exhauster-monitoring:1.0.0
    restart: always
    container_name: exhauster-monitoring-api
    ports:
      - "38080:8080"
    environment:
      - MONGODB_HOST=metrics-db
      - MONGODB_PORT=27017
      - MONGODB_DBNAME=metrics
      - MONGODB_USER=mongo
      - MONGODB_PASS=mongo
    tty: true

  metrics-db:
#    container_name: mongodb4.4
    hostname: metrics-db
    image: mongo:6.0
    volumes:
      - ./data/db:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./mongokeyfile:/docker-entrypoint-initdb.d/mongokeyfile
      - ./mongod-config-file:/docker-entrypoint-initdb.d/mongod-config-file
#    ports:
#      - 35000:27017
#    env_file:
#      - .env
#    image: docker.io/bitnami/mongodb:6.0
    container_name: metrics-db
    command: --replSet mstream --config /docker-entrypoint-initdb.d/mongod-config-file
    ports:
      - "37017:27017"
    restart: always
#    volumes:
#      - 'mongodb_data:/bitnami/mongodb'
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
      MONGO_INITDB_DATABASE: metrics
#      MONGODB_ROOT_PASSWORD: mongo
#      MONGODB_USERNAME: mongo
#      MONGODB_PASSWORD: mongo
#      MONGODB_DATABASE: metrics

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "32181:2181"
    restart: always
    volumes:
      - 'zookeeper_log:/var/lib/zookeeper/log'
      - 'zookeeper_data:/var/lib/zookeeper/data'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "39092:29092"
    restart: always
    volumes:
      - 'kafka_data:/var/lib/kafka/data'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # Kafka UI http://localhost:28080/
  kafka_ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "39090:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  grafana:
    build: './backend/monitoring/config/grafana'
    container_name: grafana
    ports:
      - "33000:3000"
#    volumes:
#      - ./backend/monitoring/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

volumes:
  zookeeper_data:
    driver: local
  zookeeper_log:
    driver: local
  kafka_data:
    driver: local
  mongodb_data:
    driver: local